import { useState, useEffect } from 'react';
import {
  listReader,
  createReader,
  updateReader,
  deleteReader,
  searchReader
} from '../../api/ReaderManagementAPI';

import ReaderModal from './ReaderFormModal';
import AddAccountModal from './AddAccountModal';
import NotificationModal from './NotificationModal';
import { Form, Button, Table } from 'react-bootstrap';

const UserManagementPage = () => {
  const [searchTerm, setSearchTerm] = useState(''); // Tr·∫°ng th√°i cho thanh t√¨m ki·∫øm 
  const [students, setStudents] = useState([]); // Tr·∫°ng th√°i cho d·ªØ li·ªáu sinh vi√™n 
  const [readerModal, setReaderModal] = useState(false); // Tr·∫°ng th√°i hi·ªÉn th·ªã modal cho sinh vi√™n 
  const [accountModal, setAccountModal] = useState(false);// Tr·∫°ng th√°i hi·ªÉn th·ªã modal cho t√†i kho·∫£n 
  const [notificationModal, setNotificationModal] = useState(false); // Tr·∫°ng th√°i hi·ªÉn th·ªã th√¥ng b√°o mu·ªën th√™m t√†i kho·∫£n hay kh√¥n sau khi th√™m ng∆∞·ªùi ƒë·ªçc 
  const [actionState, setActionState] = useState(''); // Tr·∫°ng th√°i cho h√†nh ƒë·ªông th·ª±c hi·ªán (CRUD)
  const [selectedReader, setSelectedReader] = useState(null);  // Tr·∫°ng th√°i d·ªØ li·ªáu s·∫Ω hi·ªÉn th·ªã ra trong form khi nh·∫•n v√†o add ho·∫∑c update(v·ªõi add l√† null v·ªõi update l√† data c·ªßa sinh vi√™n t∆∞∆°ng ·ª©ng)
  const [option,setOption] = useState('T·∫•t c·∫£'); // Tr·∫°ng th√°i c·ªßa b·ªô l·ªçc
  const [addAccount, setAddAccount] = useState (false); // Tr·∫°ng th√°i hi·ªán c·ªßa modal th√™m t√†i kho·∫£n cho sinh vi√™n 

  // G·ªçi API l·∫•y danh s√°ch sinh vi√™n khi component ƒë∆∞·ª£c mount(l·∫•y to√†n b·ªô sinh vi√™n ra)
  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const res = await listReader();
        setStudents(res.data); // g√°n danh s√°ch sinh vi√™n
      } catch (error) {
        console.error('L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:', error);
      }
    };
    fetchUsers();
  }, []);

   //X·ª≠ l√≠ khi b·ªô l·ªçc thay ƒë·ªïi
   const handleChangeOption = (e) =>{
    const op = e.target.value
    setOption(op)
   }

  // H√†m x·ª≠ l√Ω khi submit form trong modal
 const handleSubmit = async (formData) => {
  try {
    if (actionState === 'add') {
      console.log('Th√™m sinh vi√™n m·ªõi:', formData);
      const res = await createReader(formData);
      console.log('K·∫øt qu·∫£ th√™m:', res);

    } else if (actionState === 'update') {
      console.log('C·∫≠p nh·∫≠t sinh vi√™n:', formData);
      const res = await updateReader(formData);
      console.log('K·∫øt qu·∫£ c·∫≠p nh·∫≠t:', res);

    } else if (actionState === 'delete') {
      console.log('Xo√° sinh vi√™n:', formData);
      const res = await deleteReader(formData.student_id);
      console.log('K·∫øt qu·∫£ x√≥a:', res);
    }
    // setReaderModal(false); // ƒê√≥ng modal sau thao t√°c
  } catch (error) {
    console.error('L·ªói khi x·ª≠ l√Ω sinh vi√™n:', error);
  }
};

const handleSearch = async () => {
  try {
    const res = await searchReader({ searchTerm, option });
    if (res.success) {
      setStudents(res.data);
    } else {
      alert(res.message || "Kh√¥ng t√¨m th·∫•y sinh vi√™n n√†o");
    }
  } catch (err) {
    console.error("L·ªói t√¨m ki·∫øm:", err);
  }
};

  return (
    <div className="container mt-4">
      {/* Thanh t√¨m ki·∫øm v√† b·ªô l·ªçc */}
      <div className="d-flex flex-column flex-md-row justify-content-between align-items-center mb-3 gap-2">
        <input
          type="text"
          className="form-control w-100 w-md-25"
          placeholder="T√¨m ki·∫øm theo t√™n ho·∫∑c MSSV"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <Button variant="primary" onClick={() => {
        setActionState('search') // H√†nh ƒë·ªông t√¨m ki·∫øm 
        handleSearch({searchTerm : searchTerm,
                      option: option}); // G·ªçi h√†m v√† truy·ªÅn gi√° tr·ªã v·ª´a nh·∫≠p
        }}>T√¨m ki·∫øm</Button>

      <div className="d-flex gap-2">
        <Form.Select 
        value = {option}
        onChange={handleChangeOption}
        className="form-select">
          <option value="T·∫•t c·∫£">T·∫•t c·∫£ sinh vi√™n</option>
          <option value="Khoa H·ªçc M√°y T√≠nh">Khoa H·ªçc M√°y T√≠nh</option>
          <option value="T·ª± ƒê·ªông H√≥a & ƒêi·ªán T·ª≠">T·ª± ƒê·ªông H√≥a & ƒêi·ªán T·ª≠</option>
          <option value="C√¥ng Ngh·ªá Th√¥ng Tin To√†n C·∫ßu">C√¥ng Ngh·ªá Th√¥ng Tin To√†n C·∫ßu</option>
          <option value="K·ªπ Thu·∫≠t Ph·∫ßn M·ªÅm">K·ªπ Thu·∫≠t Ph·∫ßn M·ªÅm</option>
          <option value="Qu·∫£n Tr·ªã C√¥ng Ngh·ªá">Qu·∫£n Tr·ªã C√¥ng Ngh·ªá</option>
          <option value="Thi·∫øt K·∫ø & Truy·ªÅn Th√¥ng S·ªë">Thi·∫øt K·∫ø & Truy·ªÅn Th√¥ng S·ªë</option>
          <option value="Khoa H·ªçc D·ªØ Li·ªáu & AI">Khoa H·ªçc D·ªØ Li·ªáu & AI</option>
          <option value="Ngo·∫°i Ng·ªØ & Giao Ti·∫øp">Ngo·∫°i Ng·ªØ & Giao Ti·∫øp</option>
          <option value="C√¥ng Ngh·ªá Sinh H·ªçc & K·ªπ Thu·∫≠t Y Sinh">C√¥ng Ngh·ªá Sinh H·ªçc & K·ªπ Thu·∫≠t Y Sinh</option>
        </Form.Select>

          <Button
            variant="success"
            onClick={() => {
              setActionState('search');   // H√†nh ƒë·ªông t√¨m ki·∫øm 
              setSelectedReader(null);   // Kh√¥ng c√≥ d·ªØ li·ªáu trong form
              setReaderModal(true);     // ƒê·∫∑t tr·∫°ng th√°i modal l√† m·ªü
            }}
          >
            Th√™m sinh vi√™n
          </Button>
        </div>
      </div>

      {/* B·∫¢NG DANH S√ÅCH SINH VI√äN */}
      <Table striped bordered hover responsive>
        <thead>
          <tr>
            <th>ID</th>
            <th>M√£ sinh vi√™n</th>
            <th>H·ªç t√™n</th>
            <th>Email</th>
            <th>SƒêT</th>
            <th>Khoa</th>
            <th className="text-center">H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {students.map((student) => (
            <tr key={student.reader_id}>
              <td>{student.reader_id}</td>
              <td>{student.student_id}</td>
              <td>{student.full_name}</td>
              <td>{student.email}</td>
              <td>{student.phone_number}</td>
              <td>{student.faculty}</td>
              <td className="text-center">
                {/* N√∫t c·∫≠p nh·∫≠t */}
                <Button
                  variant="warning"
                  size="sm"
                  className="me-2"
                  onClick={() => {
                    setActionState('update');    // ch·∫ø ƒë·ªô c·∫≠p nh·∫≠t
                    setSelectedReader(student);  // truy·ªÅn d·ªØ li·ªáu ng∆∞·ªùi d√πng
                    setReaderModal(true);        // m·ªü modal
                  }}
                >
                  ‚úèÔ∏è
                </Button>

                {/* N√∫t x√≥a */}
                <Button
                  variant="danger"
                  size="sm"
                  onClick={() => {
                    setActionState('delete');     // ch·∫ø ƒë·ªô x√≥a
                    setSelectedReader(student);   // truy·ªÅn d·ªØ li·ªáu
                    setReaderModal(true);         // m·ªü modal x√°c nh·∫≠n ho·∫∑c hi·ªÉn th·ªã d·ªØ li·ªáu
                  }}
                >
                  üóëÔ∏è
                </Button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>

      {/* Modal th√™m c·∫≠p nh·∫≠t x√≥a */}
      <ReaderModal
        show={readerModal}
        onHide={() => setReaderModal(false)}
        actionState={actionState}
        handleSubmit={handleSubmit}
        initialData={selectedReader}
      />

      {/* C√ÅC MODAL KH√ÅC */}
      {/* Hi·ªán th√¥ng b√°o c√≥ mu·ªën ti·∫øp t·ª•c t·∫°o t√†i kho·∫£n cho sinh vi√™n hay kh√¥ng */}
      {notificationModal && <NotificationModal />}
       {/*Hi·ªán modal ƒë·ªÉ th√™m t√†i kho·∫£n cho sinh vi√™n  */}
      {accountModal && (
        <AddAccountModal show={accountModal} onHide={() => setAccountModal(false)} />
      )}
    </div>
  );
};

export default UserManagementPage;
